What is lycycle hook?
    the series of stages a component goes through from initialization to destruction.

CONTRUCTOR:
    it is not part of the hooks, but it will executed before all the hooks for initialization(very rare), mostly used for dependency injection.

ngOnChages():
    if the first hook, called ofter the bound input property changed. it is only used if the component has input property.
    It will be only called if the component has input property.

         export class Component implements OnInit, OnChages {
                   
                    ngOnChanges(): void {
                        //  ngOnChanges called
                    }


                    //lets say we want to perform specific operation on the changes occured:
                             ngOnChanges(changes: SimpleChanges): void {
                                //  ngOnChanges called
                                console.log(changes) // it will give the entire change info of parent such as currentValue, firstChage, previousValue.
                                console.log(changes.currentValue) // it will give the currentValue value of the input property.
                                console.log(changes.firstChage) // it will store the boolean value, tells about if the change made first time.
                            }

                    ngOnInit(): void {
                        // ngOnInit called
                    }
                    

            }

ngOnInit():
    called once the component is initialized and its inputs have been bound.
    mostly we use this is for initialization.
    It is a good place to perform setup tasks, such as retrieving data from a service or initializing component properties.
    Is is only called once.   
        export class Component implements OnInit {
                   
                    ngOnInit(): void {
                        // initialization logic goes here.
                    }

            }


            
ngDoCheck():
    called during any change detection run.
    it will run every time if the data changes.
         ngDoCheck(): void {
            //  ngDoCheck called
        }

ngAfterContentInit():
    called after the ng-content has been projected into view.

            export class Component implements OnInit {
                   
                    ngOnInit(): void {
                        // initialization logic goes here.
                    }

            }


ngAfterContentChecked():
    called every time once the projected content has been checked.

ngAfterViewInit():
    called after component(child) view has been initialized.


ngAfterViewChecked():
    called every time once the component(child) view is ckecked.

ngOnDestroy():
    called when the component is about to destroy.


Why should we use ngOnInit() for initialization over CONTRUCTOR?
    While both the constructor and ngOnInit() method can be used for component initialization tasks,
    it is recommended to use ngOnInit() for such purposes.

    There are several reasons for this:

        Timing: The constructor is called when the object is created, even before Angular initializes the component's data bindings and input properties.
        On the other hand, ngOnInit() is called after the component's data bindings have been resolved, making it the appropriate place to perform initialization tasks that depend on input properties and other data-bound values.

        Access to Input Properties: In ngOnInit(), you can be sure that the component's input properties are already available and initialized.
        This is not guaranteed in the constructor since input properties might not have been set at that point.



What is content and View?

        VIEW:
            The "view" refers to the template and the portion of the component's DOM that is controlled by the component itself.
            It includes the HTML structure, bindings, directives, and any other elements defined within the component's template.

                <div>
                <h1>Welcome to the App!</h1>
                <app-child></app-child>  //child component which can be accessed here
                </div>
            
            @ViewChild:
                        ViewChild is a decorator and a mechanism in Angular used to access a reference to an element or component within a component's view.
                        It allows you to query and retrieve a reference to a child component, element, or directive in your component's template.

                        Demonstration:
                                lets assume this div may be in the same Component

                                    <div>
                                        <p #msg>this is from div from child/same component</p>    //NOTE: we can assign a same ref for any number of tags!
                                        <p #msg>this is onother msg from div from child/same component</p>
                                    </div>

                                lets assume now you want to access the div from the same component!

                                Note: here we need ngAfterViewInit, it help us to give the date after initialization.

                                     export class Component implements OnInit, AfterViewInit {

                                                @ViewChild('msg') message:ElementRef;  // here with help of @ViewChild we are we are refering the data to message var, and it the element data so  we should  use ElementRef.
                                                ngOnInit(): void {
                                                    // initialization logic goes here.
                                                }

                                                ngAfterViewInit: void{
                                                               // console.log(msg)
                                                               // here we can make chages to the accessed data as we want:)
                                                               msg.nativeElement.style.color="red"  // this is only applied to the first msg. as we are using ViewChild.
                                                }

                                        }
                                Note: ViewChild only give access to first element of the referenced elements. we can not modifie if the same reference is given to the multiple elements.
                                      this problem will be overcome by ViewChildren. it will give list of referenced elements, so that we can make changes for any element. refer for below example.

                                    export class Component implements OnInit, AfterViewInit {

                                                @ViewChildren('msg') message:QueryList<any>;  // here with help of @ViewChildren we are we are refering the data to message var, and it will the list of element data so we should use  QueryList.
                                                ngOnInit(): void {
                                                    // initialization logic goes here.
                                                }

                                                ngAfterViewInit: void{
                                                               // console.log(msg)
                                                               // here we can make chages to the accessed data as we want:)
                                                               msg.first.nativeElement.style.color="red"  // this is only applied to the first msg. as we are using ViewChildren.
                                                               msg.last.nativeElement.style.color="green"  // this is only applied to the last msg. as we are using ViewChildren.

                                                }

                                        }
                        
                                lets assume now you want to access the div from the diff component!

                                lets assume some html code present in the child component.
                                we will render that is in parent using their component name i.e <c_name></c_name>
                                here we will give name to the reference i.e <c_name #ref_name></c_name>

                                    export class Component implements OnInit, AfterViewInit {

                                                @ViewChildren('ref_name') Child_var:ChildComponent_ClassName;  // here with help of @ViewChildren we are we are refering the data to Child_var, and it will the entire component so we should use  their ChildComponent_ClassName.
                                                ngOnInit(): void {
                                                    // initialization logic goes here.
                                                }

                                                ngAfterViewInit: void{
                                                               // console.log(msg)
                                                               // here we can make chages to the accessed data as we want:)

                                                }
                                                //Note: we can access the methods present in the child component using Child_var.

                                        }
        

        CONTENT Projection:
            Content Projection, also known as transclusion, is a powerful feature in Angular that allows you to pass and project content from a parent component's template into a child component's template.
            It provides flexibility in composing components and allows for dynamic content injection. it allows us reusability of the components dynamically.

                lets assume some html code present in the child component.
                we will render that is in parent using their component name i.e <c_name></c_name>
                here we will give name to the reference i.e <c_name > here goes the content whick can be used by child component</c_name>

                now in child component:
                    <div>
                        <ng-content></ng-content> 
                        <p >this is msg from div from child/same component</p>
                    </div>